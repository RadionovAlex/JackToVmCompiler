// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int mapStart;
    static int mapSize;
    static int width;
    static int height;
    static int bitsInSystem;
    static boolean color;

    static Array screenMap;
    static Array masks;

    /** Initializes the Screen. */
    function void init() {
        let bitsInSystem = 16;
        let mapStart = 16384;
        let screenMap = mapStart;
        let width = 512;
        let height = 256;
        let mapSize = width * height / bitsInSystem;
        do Screen.initMasks();

        return;
    }

    function void initMasks(){
        var int index;
        var int curIndex;
        var Array debugArray;

        let index = 0;
        let masks = Array.new(16);
        let debugArray = 15000;
        let debugArray[0] = masks;

        while(index < (bitsInSystem - 1)){
            let curIndex = index;
            let masks[curIndex] = Screen.get2InPowOfPower(curIndex);
            let index = index + 1;
        }

        let masks[index] = -32767 - 1;

        return;        
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int xIndex, yIndex;

        let xIndex = 0;
        let yIndex = 0;

        while(yIndex < height){
            while(xIndex < width){

                let xIndex = xIndex + 1;
            }
            let yIndex = yIndex + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function int GetBitValueTest(int x, int y){
        var int registerAddress;
        var int bitIndexInRegister;
        var boolean currentBitValue;

        let registerAddress = Screen.getRegisterAddress(x, y);
        let bitIndexInRegister = Screen.getBitIndexInRegister(x);
        
        let currentBitValue = Screen.getBitValueInRegister(registerAddress, bitIndexInRegister);

        return currentBitValue;

    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int registerAddress;
        var int bitIndexInRegister;
        var boolean currentBitValue;
        var int currentRegisterValue;
        var int differenceToApply;
        var int mask;

        let registerAddress = Screen.getRegisterAddress(x, y);
        let bitIndexInRegister = Screen.getBitIndexInRegister(x);
        
        let currentBitValue = Screen.getBitValueInRegister(registerAddress, bitIndexInRegister);
        if(currentBitValue = color){
            do Sys.error(5);
            return;
        }

        let currentRegisterValue = screenMap[registerAddress];

        let mask = masks[bitIndexInRegister];
        if(color){
            let currentRegisterValue = currentRegisterValue | mask;
        }
        else{
            let mask = ~mask;
            let currentRegisterValue = currentRegisterValue & mask;
        }

        let screenMap[registerAddress] = currentRegisterValue;

        return;
    }

    function int getRegisterAddress(int x, int y){
        var int tempResult;
        // registerAddressInMap = (width/bitsInSystem * y) + x/bitsInSystem;
        let tempResult = width / bitsInSystem;
        let tempResult = tempResult * y;
        let tempResult = (x / bitsInSystem) + tempResult;

        return tempResult;
    }

    function int getBitIndexInRegister(int pixelIndexInRow){
        var int divisionResult;

        let divisionResult = pixelIndexInRow / bitsInSystem;
        return pixelIndexInRow - (divisionResult * bitsInSystem);
    }    

    function int get2InPowOfPower(int pow){
        var int curPower;
        var int powerValue;
        var int maxPower;
        
        let maxPower = bitsInSystem - 1; //first bit means sign.
        let curPower = 0;
        let powerValue = 0;

        // calculate power of 2^pow
        while(~(curPower > pow)){ 
            if(curPower = 0){
                let powerValue = 1;
            }
            else{
                if(curPower = maxPower){
                    let powerValue = 16384;
                }
                else{
                    let powerValue = powerValue * 2;
                }
            }

            let curPower = curPower + 1; 
        }

        return powerValue;
    }

    function boolean getBitValueInRegister(int registerAddress, int bitIndex){
        var int registerValue;
        var boolean isValuePositive;
        var int maxPower;
        var int mergedValue;
        var Array bitDebugArray;
        
        var int powerValue;
        var int defineIndex;

        let bitDebugArray = 14000;
        let registerValue = screenMap[registerAddress];
        let isValuePositive = ~(registerValue < 0);

        
        let mergedValue = masks[bitIndex] & registerValue;

        return ~(mergedValue = 0);
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int fromX;
        var int fromY;
        var int toX;
        var int toY;

        var int curX;
        var int curY;

        if(x1 < 0 | y1 < 0 | x2 < 0 | y2 < 0){
            do Sys.error(40);
            return;
        }

        if(~(x1 < width) | ~(x2 < width))
        {
            do Sys.error(41);
            return;
        }

        if(~(y1 < height) | ~(y2 < height)){
            do Sys.error(42);
            return;
        }

        if(x1 < x2){
            let fromX = x1;
            let toX = x2;
        }
        else{
            let fromX = x2;
            let toX = x1;
        }

        if(y1 < y2){
            let fromY = y1;
            let toY = y2;
        }
        else{
            let fromY = y2;
            let toY = y1;
        }
        
        let curX = fromX;
        let curY = fromY;
        
        while(~(curY > toY)){
            while(~(curX > toX)){
                do Screen.drawPixel(curX, curY);
                let curX = curX + 1;
            }
            let curX = fromX;
            let curY = curY + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
