// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int mapStart;
    static int mapSize;
    static int width;
    static int height;
    static int bitsInSystem;
    static boolean color;

    static Array screenMap;

    /** Initializes the Screen. */
    function void init() {
        let bitsInSystem = 16;
        let mapStart = 16384;
        let width = 512;
        let height = 256;
        let mapSize = width * height / bitsInSystem;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        int xIndex, yIndex;

        let xIndex = 0;
        let yIndex = 0;

        while(yIndex < height){
            while(xIndex < width){

                let xIndex = xIndex + 1;
            }
            let yIndex = yIndex + 1;
        }
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int registerAddress;
        var int bitIndexInRegister;
        var boolean currentBitValue;
        var int currentRegisterValue;
        var int differenceToApply;
        var int powerForDifference;

        let registerAddress = getRegisterAddress(x, y);
        let bitIndexInRegister = getBitIndexInRegister(x);
        
        let currentBitValue = getBitValueInRegister(registerAddress, bitIndexInRegister);
        if(currentBitValue = color){
            return;
        }

        let currentRegisterValue = screenMap[registerAddress];
        if(bitIndexInRegister = 0){
            if(currentRegisterValue > 0){
                let currentRegisterValue = currentRegisterValue - 32767;
            }
            else{
                let currentRegisterValue = currentRegisterValue + 32767;
            }

            let screenMap[registerAddress] = currentRegisterValue;

            return;
        }

        let powerForDifference = bitsInSystem - 1 - bitIndexInRegister;             
        let differenceToApply = Screen.get2InPowOfPower(powerForDifference);

        if(color){
            let currentRegisterValue = currentRegisterValue + differenceToApply;
        }                 
        else{
            let currentRegisterValue = currentRegisterValue - differenceToApply;
        }

        let screenMap[registerAddress] = currentRegisterValue;
        return;
    }

    function int getRegisterAddress(int x, int y){
        var int tempResult;
        // registerAddressInMap = (width/bitsInSystem * y) + x/bitsInSystem;
        let tempResult = width / bitsInSystem;
        let tempResult = tempResult * y;
        let tempResult = tempResult + (x / bitsInSystem);

        return tempResult;
    }

    function int getBitIndexInRegister(int pixelIndexInRow){
        var int divisionResult;

        let divisionResult = pixelIndexInRow / bitsInSystem;
        return pixelIndexInRow - (divisionResult * bitsInSystem);
    }    

    function int get2InPowOfPower(int pow){
        var int curPower;
        var int powerValue;

        let curPower = 0;
        let powerValue = 0;

        // calculate power of 2^pow
        while(~(curPower > pow)){ 
            if(curPower = 0){
                let powerValue = 1;
            }
            else{
                let powerValue = powerValue * 2;
            }

            let curPower = curPower + 1; 
        }

        return powerValue;
    }

    function boolean getBitValueInRegister(int registerAddress, int bitIndex){
        var int registerValue;
        var boolean isValuePositive;
        var int maxPower;
        
        var int powerValue;
        var int defineIndex;

        let maxPower = bitsInSystem - 1; //first bit means sign.
        let registerValue = screenMap[registerAddress];
        let isValuePositive = ~(registerValue < 0);

        if(bitIndex = 0){
            if(isValuePositive){
                return false;
            }
            else{
                return true;
            }
        }

        let powerValue = Screen.get2InPowOfPower(maxPower);
        
        let defineIndex = 1;
        while(~(defineIndex > maxPower)){
            if(defineIndex = bitIndex){
                if(isValuePositive){
                    if(~(registerValue < powerValue)){
                        return true;
                    }
                }
                else{
                     if(~(registerValue > powerValue)){
                        return true;
                    }
                }

                return true;
            }
            
            if(isValuePositive){
                if(~(registerValue < powerValue)){
                    let registerValue = registerValue - powerValue;
                }
            }
            else{
                if(~(registerValue > powerValue)){
                    let registerValue = registerValue + powerValue;
                }
            }
            let powerValue = powerValue / 2;
            let defineIndex = defineIndex + 1;
        }
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
