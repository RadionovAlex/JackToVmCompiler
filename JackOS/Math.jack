/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */

 // note: in case of overflow, there is no errors. So end-user should consider this;
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var tempIndex = 0;
        let n = 16;
        let powersOfTwo = Array.new(n);
        while(tempIndex < n)
        {
            if(tempIndex = 0)
            {
                let powersOfTwo[n] = 1;
                return;
            }

            let powersOfTwo[n] = powersOfTwo[n-1] * 2;
            return;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) 
    {
        var bool isNegative;
        var int result;

        if(x = 0){
            return 0;
        }

        if(y = 0){
            return 0;
        }

        if(x < 0){
            let isNegative = 1 - isNegative;
            let x = -x;
        }

        if(y < 0){
            let isNegative = 1 - isNegative;
            let y = -y;
        }
        
        let result = Math.multiplyBitwise(x, y);

        if(isNegative){
            let result = -result;
        }

        return result;
    }

    function int multiplyBitwise(int x, int y)
    {
 // result - is a sum of leftShifts x << ls, where ls -> log2N. 
        // Example 1, y = 64, leftPart = y
        // log2(leftPart) = 6. 
        // so result = x << 64. 

        // Example 2, y = 70, leftPart = y, handledPart = 0
        // log2(leftPart) = 6
        // result = x << 64
        // handledPart = 64
        // leftPart = y - handledPart
        // log(handledPart) = 2
        // result += x << 2
        // handledPart = handledPart + 4
        // leftPart = y - handledPart;
        // log(leftPart) = 1
        // result += x << 1

        // if(leftPart == 1)
        // result += x 

        var int result;
        var currentPowerIndexOfTwo;
        var currentPowerOfTwo;

        if(y = 1){
            return x;
        }
        if(x = 1){
            return y;
        }

        let result = 0;
        let currentPowerIndexOfTwo = 0;
        let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
       
        while(currentPowerOfTwo < y){
            let currentPowerIndexOfTwo = currentPowerIndexOfTwo + 1;
            let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
        }

        if(currentPowerOfTwo > y){
            let currentPowerIndexOfTwo = currentPowerIndexOfTwo - 1;
            let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
        }

        let result = Math.leftShift(x, currentPowerIndexOfTwo) + Math.multiplyBitwise(x, y-currentPowerOfTwo);

        return result;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    }

    /** Returns the greater value. */
    function int max(int a, int b) 
    {
        if(a > b){
            return a;
        }

        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) 
    {
        if(a < b){
            return a;
        }

        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if(x < 0){
            x = x * -1;
        }
        return x;
    }

     function int leftShift(int x, int n)
    {
        var int result;
        let result = x;
        while(n > 0)
        {
            let result = result + result;
            let n = n -1;
        }

        return result;
    }

    function int rightShift(int x, int n)
    {
        var int result;
        let result = x;
        while(n > 0)
        {   
            let result = result / 2;
            let n = n - 1;
        }

        return result;
    }

    function int log2X(int x)
    {
        var int index = 0;
        while(index < Math.n)
        {
            if(Math.powersOfTwo[index] = x)
            {
                return index;
            }
            let index = index + 1;
        }

        return -1;
    }
}
