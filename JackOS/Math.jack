/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */

 // note: in case of overflow, there is no errors. So end-user should consider this;
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    function int GetN()
    {
        return n;
    }

    // Initializes the Math library.
    function void init() {
        var int tempIndex;
        let n = 16;
        let powersOfTwo = Array.new(n);

        let tempIndex = 0;
        
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767;

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) 
    {
        var int isNegative;
        var int result;

        let isNegative = 0;

        if(x = 0){
            return 0;
        }

        if(y = 0){
            return 0;
        }

        if(x < 0){
            let isNegative = 1 - isNegative;
            let x = Math.abs(x);
        }

        if(y < 0){
            let isNegative = 1 - isNegative;
            let y = Math.abs(y);
        }
        
        let result = Math.multiplyBitwise(x, y);

        if(isNegative > 0){
            let result = -result;
        }

        return result;
    }

    function int multiplyBitwise(int x, int y)
    {
        var int result;
        var int currentPowerIndexOfTwo;
        var int currentPowerOfTwo;
        var Array myArr;
        let myArr = 15002;

        if(y = 1){
            return x;
        }
        if(x = 1){
            return y;
        }
        if(y = 0)
        {
            return 0;
        }
        if(x = 0)
        {
            return 0;
        }

        let myArr[0] = x;
        let myArr[1] = y;

        let result = 0;
        let currentPowerIndexOfTwo = 0;
        let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
       
        while(currentPowerOfTwo < y){
            let currentPowerIndexOfTwo = currentPowerIndexOfTwo + 1;
            let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
        }

        if(currentPowerOfTwo > y){
            let currentPowerIndexOfTwo = currentPowerIndexOfTwo - 1;
            let currentPowerOfTwo = powersOfTwo[currentPowerIndexOfTwo];
        }

        let result = Math.leftShift(x, currentPowerIndexOfTwo) + Math.multiplyBitwise(x, y - currentPowerOfTwo);

        return result;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) 
    {
        var boolean isNegative;
        var int result;
        var int xAbs;
        var int yAbs;

        let isNegative = 0;
        let xAbs = Math.abs(x);
        let yAbs = Math.abs(y);

        if(xAbs < yAbs){
            return 0;
        }
        
        if(x = 0){
            return 0;
        }

        if(y = 0){
            do Sys.error(100);
            return 0;
        }

        if(x < 0){
            let isNegative = 1 - isNegative;
        }

        if(y < 0){
            let isNegative = 1 - isNegative;
        }

        let result = Math.divideProcedure(xAbs, yAbs);
        if(isNegative > 0){
            let result = -result;
        }

        return result;
    }

    function int divideProcedure(int x, int y)
    { 

        var Array myArr;  
        var int divideResult;

        if(y > x){
            return 0;
        }

        let divideResult = Math.divideProcedure(x, 2 * y);

        if(x - (2 * divideResult * y) < y){
            return 2 * divideResult;
        }
        
        return (2 * divideResult) + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result;
        var int tempResult;
        var int pow;

        if(x < 0)
        {
            do Sys.error(90);
            return 0;
        }

        let result = 0;
        let tempResult = 0;
        let pow = (Math.GetN() / 2) -1;
        while(~(pow < 0))
        {
            let tempResult = result + powersOfTwo[pow];
            let tempResult = tempResult * tempResult;

            if(~(tempResult < 0)){
                if(~(tempResult > x)){
                    let result = result + powersOfTwo[pow];
                }
            }
            

            let pow = pow - 1;
        }

        return result;
    }

    /** Returns the greater value. */
    function int max(int a, int b) 
    {
        if(a > b){
            return a;
        }

        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) 
    {
        if(a < b){
            return a;
        }

        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if(x < 0){
            let x = -x;
        }
        return x;
    }

     function int leftShift(int x, int n)
    {
        var int result;
        let result = x;
        while(n > 0)
        {
            let result = result + result;
            let n = n - 1;
        }

        return result;
    }

    function int rightShift(int x, int n)
    {
        var int result;
        let result = x;
        while(n > 0)
        {   
            let result = result / 2;
            let n = n - 1;
        }

        return result;
    }
}